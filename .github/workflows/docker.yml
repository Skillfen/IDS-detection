name: DevSecOps CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  devsecops_pipeline:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
       distribution: 'temurin'   # obligatoire
       java-version: '17'

    ##############################
    # 1️⃣ Build Maven & Tests
    ##############################
    - name: Build and run Maven tests
      run: mvn clean test -f ./webtest/webtest/pom.xml
    - name: Build Maven project
      working-directory: ./webtest/webtest
      run: |
           mvn clean install -DskipTests
           mvn clean package
    ##############################
     # 5️⃣ SonarQube Scan
    ##############################
    - name: SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@v5
      with:
        projectBaseDir: .
        args: >
          -Dsonar.projectKey=Skillfen_IDS-detection
          -Dsonar.organization=skillfen
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.token=${{ secrets.SONAR_TOKEN }}
          -Dsonar.java.binaries=webtest/webtest/target/classes


    - name: Copy SonarQube report
      run: |
        mkdir -p tests/reports/sonarqube
        cp -r .scannerwork/* tests/reports/sonarqube/ || true

    ##############################
    # 3️⃣ Docker + Trivy scan
    ##############################
    - name: Build Docker image
      run: docker build -t springboot-app ./webtest/webtest

    - name: install trivy and Scan Docker image with Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy
        mkdir -p tests/reports/trivy
        trivy image --format json --output tests/reports/trivy/trivy-report.json springboot-app
    - name: Upload Trivy report
      uses: actions/upload-artifact@v4
      with:
       name: trivy-report
       path: tests/reports/trivy/trivy-report.json

    ##############################
    # 4️⃣ Start application with Docker Compose
    ##############################
    - name: Start Docker Compose
      run: |
           sudo apt-get install docker-compose
           docker-compose -f ./webtest/webtest/docker-compose.yaml up -d

    - name: Start app with docker-compose
      run: |
        docker-compose -f webtest/webtest/docker-compose.yaml up -d
        echo "Waiting for springboot-app to be healthy..."
         for i in {1..10}; do
         if docker inspect --format='{{.State.Health.Status}}' $(docker ps -qf "name=springboot-app") | grep -q "healthy"; then
           echo "App is healthy!"
           break
         fi
         echo "Waiting..."
        sleep 10
        done
    - name: Create ZAP output folder
      run: mkdir -p tests/reports/zap

    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-full-scan@v0.12.0
      with:
        target: 'http://springboot-app:8080/http-request/login'
        output: './tests/reports/zap/zap_report.html'
    # 7️⃣ Stop Docker Compose
    ##############################
    - name: Stop Docker Compose
      run: docker-compose -f ./webtest/webtest/docker-compose.yaml down

    ##############################
    # 8️⃣ Upload all reports
    ##############################
    - name: Upload all test & scan reports
      uses: actions/upload-artifact@v4
      with:
        name: devsecops-reports
        path: tests/reports/

    - name: see docker log
      run: |
        docker-compose -f ./webtest/webtest/docker-compose.yaml logs springboot-app
        docker-compose -f ./webtest/webtest/docker-compose.yaml ps
    - name: Push Docker images to Docker Hub
      if: github.ref == 'refs/heads/main'
      env:
       TAG: ${{ github.run_number }}
      run: |
        # Login with credentials
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        # Push images
        
        docker-compose -f ./webtest/webtest/docker-compose.yaml push
